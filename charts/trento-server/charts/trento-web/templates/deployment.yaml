apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "trento-web.fullname" . }}
  labels:
    {{- include "trento-web.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "trento-web.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "trento-web.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "trento-web.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: create-trento-db
          image: "{{ .Values.postgresql.image.registry }}/{{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}"
          command:
            - sh
            - -c
            - >
              while ! pg_isready -U {{ .Values.global.postgresql.postgresqlUsername }} -h {{ .Release.Name }}-{{ .Values.global.postgresql.name }};
              do sleep 1;
              done;
              echo $COMMAND | psql --file=- --echo-queries --set ON_ERROR_STOP=1
          env:
            - name: PGUSER
              value: "{{ .Values.global.postgresql.postgresqlUsername }}"
            - name: PGPASSWORD
              value: "{{ .Values.global.postgresql.postgresqlPassword }}"
            - name: PGHOST
              value: "{{ .Release.Name }}-{{ .Values.global.postgresql.name }}"
            - name: COMMAND
              value: |
                SELECT 'CREATE DATABASE trento'
                WHERE NOT EXISTS (
                  SELECT FROM pg_database WHERE datname = 'trento'
                )
                \gexec
        
        - name: create-trento-eventstore
          image: "{{ .Values.postgresql.image.registry }}/{{ .Values.postgresql.image.repository }}:{{ .Values.postgresql.image.tag }}"
          command:
            - sh
            - -c
            - >
              while ! pg_isready -U {{ .Values.global.postgresql.postgresqlUsername }} -h {{ .Release.Name }}-{{ .Values.global.postgresql.name }};
              do sleep 1;
              done;
              echo $COMMAND | psql --file=- --echo-queries --set ON_ERROR_STOP=1
          env:
            - name: PGUSER
              value: "{{ .Values.global.postgresql.postgresqlUsername }}"
            - name: PGPASSWORD
              value: "{{ .Values.global.postgresql.postgresqlPassword }}"
            - name: PGHOST
              value: "{{ .Release.Name }}-{{ .Values.global.postgresql.name }}"
            - name: COMMAND
              value: |
                SELECT 'CREATE DATABASE trento_event_store'
                WHERE NOT EXISTS (
                  SELECT FROM pg_database WHERE datname = 'trento_event_store'
                )
                \gexec
        - name: init
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ include "trento-web.fullname" . }}-configmap
            - secretRef:
                name: {{ include "trento-web.fullname" . }}-secret
            - secretRef:
                name: {{ .Release.Name }}-auth-tokens-secret
          args: ['eval', 'Trento.Release.init()']
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ include "trento-web.fullname" . }}-configmap
            - secretRef:
                name: {{ include "trento-web.fullname" . }}-secret
            - secretRef:
                name: {{ .Release.Name }}-auth-tokens-secret
          args:
            - start
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          ports:
            - name: http
              containerPort: {{ template "trentoWeb.port" . }}
              protocol: TCP
          # livenessProbe:
          #   httpGet:
          #     path: /api/ping
          #     port: http
          # readinessProbe:
          #   httpGet:
          #     path: /api/ping
          #     port: http
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
